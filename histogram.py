import numpy as np
import matplotlib.pyplot as plt
import cv2

def compute_histogram(image):
    """T√≠nh b·∫£ng histogram tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng dict"""
    hist = {}
    flat = image.ravel()
    for value in flat:
        hist[value] = hist.get(value, 0) + 1
    return dict(sorted(hist.items()))

def print_histogram_table(hist, title='Histogram'):
    print(f"\nüìä {title}")
    print("Gi√° tr·ªã\tT·∫ßn su·∫•t")
    for value, count in hist.items():
        print(f"{value}\t{count}")

def plot_histogram(image, title='Histogram'):
    plt.figure()
    plt.hist(image.ravel(), bins=256, range=[0, 256], color='gray')
    plt.title(title)
    plt.xlabel('Gi√° tr·ªã pixel')
    plt.ylabel('T·∫ßn su·∫•t')
    plt.grid(True)

def main():
    # 1. T·∫°o ma tr·∫≠n ·∫£nh x√°m ng·∫´u nhi√™n 5x5
    matrix = np.random.randint(0, 7, size=(5, 5), dtype=np.uint8)
    print("üñºÔ∏è Ma tr·∫≠n ·∫£nh g·ªëc (5x5):\n", matrix)

    # 2. T√≠nh & in b·∫£ng histogram g·ªëc
    original_hist = compute_histogram(matrix)
    print_histogram_table(original_hist, "Histogram g·ªëc")

    # 3. C√¢n b·∫±ng histogram
    equalized = cv2.equalizeHist(matrix)
    print("\nüñºÔ∏è Ma tr·∫≠n ·∫£nh sau c√¢n b·∫±ng (G):\n", equalized)

    # 4. T√≠nh & in b·∫£ng histogram sau c√¢n b·∫±ng
    equalized_hist = compute_histogram(equalized)
    print_histogram_table(equalized_hist, "Histogram sau c√¢n b·∫±ng")

    # 5. V·∫Ω bi·ªÉu ƒë·ªì histogram
    plot_histogram(matrix, 'Histogram tr∆∞·ªõc c√¢n b·∫±ng')
    plot_histogram(equalized, 'Histogram sau c√¢n b·∫±ng')

    # 6. Hi·ªÉn th·ªã ·∫£nh
    plt.figure(figsize=(8, 3))

    plt.subplot(1, 2, 1)
    plt.imshow(matrix, cmap='gray', vmin=0, vmax=255)
    plt.title('·∫¢nh g·ªëc')
    plt.axis('off')

    plt.subplot(1, 2, 2)
    plt.imshow(equalized, cmap='gray', vmin=0, vmax=255)
    plt.title('·∫¢nh sau c√¢n b·∫±ng')
    plt.axis('off')

    plt.tight_layout()
    plt.show()

if __name__ == '__main__':
    main()
