import numpy as np

def hist_calc(gray, L):
    hist = np.zeros((L,), dtype=np.float32)
    N, M = gray.shape
    for row in range(N):
        for col in range(M):
            g = gray[row, col]
            hist[g] += 1
    stdHist = hist / gray.size
    return stdHist

def equalize_histogram(gray, L):
    # 1. T√≠nh histogram chu·∫©n h√≥a
    hist = hist_calc(gray, L)
    print("üìä Histogram chu·∫©n h√≥a:")
    print(hist)

    # 2. T√≠nh CDF
    cdf = np.cumsum(hist)
    print("\nüìà CDF:")
    print(cdf)

    # 3. X√°c ƒë·ªãnh Cmin (kh√°c 0 ƒë·∫ßu ti√™n)
    cdf_min = cdf[cdf > 0].min()
    print(f"\nüîç CDF min (‚â† 0): {cdf_min:.4f}")

    # 4. T√≠nh c√°c gi√° tr·ªã Sk b·∫±ng c√¥ng th·ª©c: Sk = round((Ck - Cmin)*(L-1)/(1 - Cmin))
    sk = np.round((cdf - cdf_min) * (L - 1) / (1 - cdf_min)).astype(np.uint8)
    print("\nüéØ M·∫£ng Sk (mapping):")
    print(sk)

    # 5. T·∫°o ·∫£nh c√¢n b·∫±ng m·ªõi
    N, M = gray.shape
    result = np.zeros_like(gray)
    for row in range(N):
        for col in range(M):
            result[row, col] = sk[gray[row, col]]

    print("\nüñºÔ∏è ·∫¢nh sau c√¢n b·∫±ng histogram:")
    print(result)
    return result


gray = np.array([
    [6.5,9.1,4.4,6.2,3.1],
    [3.4,7.1,11.2,8.4,6.5],
    [7.7,9,4.2,5.1,5.5],
    [3.9,10.9,8,7,5],
    [10,6,8,9,5.4]
], dtype=np.uint8)

L = 16  # ·∫£nh x√°m 4-bit

equalized_img = equalize_histogram(gray, L)
